<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Exceptions\Validation\AppValidationException;
use App\Http\Controllers\FileController;
use App\Http\Requests\File\FileRequest;
use Faker\Factory;
use Faker\Generator;
use Illuminate\Support\Facades\Event;
use Px\Framework\Http\Responder\Response;
use Symfony\Component\HttpFoundation\Request;
use Tests\TestCase;

class FileControllerTest extends TestCase
{
    private Generator $faker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
    }

    /**
     *
     */
    public function testCreateFileWithWrongParams(): void
    {
        Event::fake();

        $this->expectException(AppValidationException::class);
        $this->expectExceptionMessageMatches('/.*"disk":\["The disk has to be one of.*/');

        $dataSource = $this->dataProvider();
        $dataSource['disk'] = 'not-exists';

        $request = new FileRequest($dataSource);
        $controller = new FileController();

        $controller->createFile($request);
    }

    public function testCreateFile(): void
    {
       Event::fake();

        $request = new FileRequest($this->dataProvider());
        $controller = new FileController();

        $response = $controller->createFile($request);

        $responseData = $response->getData(true);

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
        $this->assertArrayHasKey('success', $responseData);
        $this->assertEquals(true, ($responseData['response']['is_created'] ?? false));
    }

    private function dataProvider(): array
    {
        return [
            'disk' => 'demo-local',
            'file_name' => 'test.' . date('Y-m-d-H-i-s') . '.txt',
            'save_path' => 'phpunit',
            'contents' => $this->faker->sentences(10, true)
        ];
    }
}
